# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
# pylint: disable=invalid-name,no-member,too-few-public-methods
# pylint: disable=too-many-arguments,missing-function-docstring
# pylint: disable=useless-object-inheritance,no-self-use
# pylint: disable=unused-argument

# Generated protobuf imports may not be found during linting
# pylint: disable=import-error
from . import service_pb2 as service__pb2
import grpc


# Constants should be UPPER_CASE but we can't change generated code
# pylint: disable=invalid-name

# Version checking code uses lowercase names but we can't change it
# pylint: disable=invalid-name

GRPC_GENERATED_VERSION = '1.69.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION}, '
        f'but the generated code in service_pb2_grpc.py depends on '
        f'grpcio>={GRPC_GENERATED_VERSION}. '
        f'Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION} '
        f'or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PiServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamAudio = channel.stream_stream(
                '/PiServer/StreamAudio',
                request_serializer=service__pb2.AudioChunk.SerializeToString,
                response_deserializer=service__pb2.AudioResponse.FromString,
                _registered_method=True)
        self.SendImage = channel.unary_unary(
                '/PiServer/SendImage',
                request_serializer=service__pb2.ImageFrame.SerializeToString,
                response_deserializer=service__pb2.ImageResponse.FromString,
                _registered_method=True)
        self.SendMessage = channel.unary_unary(
                '/PiServer/SendMessage',
                request_serializer=service__pb2.MessageRequest.SerializeToString,
                response_deserializer=service__pb2.MessageResponse.FromString,
                _registered_method=True)


class PiServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamAudio(self, request_iterator, context):
        """Bidirectional streaming for audio
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendImage(self, request, context):
        """Streaming images
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Messaging and function calls
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PiServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamAudio': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamAudio,
                    request_deserializer=service__pb2.AudioChunk.FromString,
                    response_serializer=service__pb2.AudioResponse.SerializeToString,
            ),
            'SendImage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendImage,
                    request_deserializer=service__pb2.ImageFrame.FromString,
                    response_serializer=service__pb2.ImageResponse.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=service__pb2.MessageRequest.FromString,
                    response_serializer=service__pb2.MessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PiServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('PiServer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PiServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamAudio(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/PiServer/StreamAudio',
            service__pb2.AudioChunk.SerializeToString,
            service__pb2.AudioResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PiServer/SendImage',
            service__pb2.ImageFrame.SerializeToString,
            service__pb2.ImageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PiServer/SendMessage',
            service__pb2.MessageRequest.SerializeToString,
            service__pb2.MessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
